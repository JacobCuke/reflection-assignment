======================================================
Filename: script3.txt
Running Test: ClassB
Recursive: true
CLASS
Class: ClassB
SUPERCLASS -> Recursively Inspect
SuperClass: ClassC
	CLASS
	Class: ClassC
	SUPERCLASS -> Recursively Inspect
	SuperClass: ClassD
		CLASS
		Class: ClassD
		SUPERCLASS -> Recursively Inspect
		SuperClass: java.lang.Object
			CLASS
			Class: java.lang.Object
			INTERFACES ( java.lang.Object )
			Interfaces-> NONE
			CONSTRUCTORS ( java.lang.Object )
			Constructors-> 
			 CONSTRUCTOR
			  Name: java.lang.Object
			  Parameter types-> NONE
			  Modifiers: public
			METHODS ( java.lang.Object )
			Methods-> 
			 METHOD
			  Name: finalize
			  Exceptions-> 
			   java.lang.Throwable
			  Parameter types-> NONE
			  Return type: void
			  Modifiers: protected
			 METHOD
			  Name: wait
			  Exceptions-> 
			   java.lang.InterruptedException
			  Parameter types-> 
			   long
			   int
			  Return type: void
			  Modifiers: public final
			 METHOD
			  Name: wait
			  Exceptions-> 
			   java.lang.InterruptedException
			  Parameter types-> 
			   long
			  Return type: void
			  Modifiers: public final native
			 METHOD
			  Name: wait
			  Exceptions-> 
			   java.lang.InterruptedException
			  Parameter types-> NONE
			  Return type: void
			  Modifiers: public final
			 METHOD
			  Name: equals
			  Exceptions-> NONE
			  Parameter types-> 
			   class java.lang.Object
			  Return type: boolean
			  Modifiers: public
			 METHOD
			  Name: toString
			  Exceptions-> NONE
			  Parameter types-> NONE
			  Return type: class java.lang.String
			  Modifiers: public
			 METHOD
			  Name: hashCode
			  Exceptions-> NONE
			  Parameter types-> NONE
			  Return type: int
			  Modifiers: public native
			 METHOD
			  Name: getClass
			  Exceptions-> NONE
			  Parameter types-> NONE
			  Return type: class java.lang.Class
			  Modifiers: public final native
			 METHOD
			  Name: clone
			  Exceptions-> 
			   java.lang.CloneNotSupportedException
			  Parameter types-> NONE
			  Return type: class java.lang.Object
			  Modifiers: protected native
			 METHOD
			  Name: registerNatives
			  Exceptions-> NONE
			  Parameter types-> NONE
			  Return type: void
			  Modifiers: private static native
			 METHOD
			  Name: notify
			  Exceptions-> NONE
			  Parameter types-> NONE
			  Return type: void
			  Modifiers: public final native
			 METHOD
			  Name: notifyAll
			  Exceptions-> NONE
			  Parameter types-> NONE
			  Return type: void
			  Modifiers: public final native
			FIELDS ( java.lang.Object )
			Fields-> NONE
		INTERFACES ( ClassD )
		Interfaces-> NONE
		CONSTRUCTORS ( ClassD )
		Constructors-> 
		 CONSTRUCTOR
		  Name: ClassD
		  Parameter types-> NONE
		  Modifiers: public
		 CONSTRUCTOR
		  Name: ClassD
		  Parameter types-> 
		   int
		  Modifiers: public
		METHODS ( ClassD )
		Methods-> 
		 METHOD
		  Name: getVal3
		  Exceptions-> NONE
		  Parameter types-> NONE
		  Return type: int
		  Modifiers: public
		 METHOD
		  Name: toString
		  Exceptions-> NONE
		  Parameter types-> NONE
		  Return type: class java.lang.String
		  Modifiers: public
		FIELDS ( ClassD )
		Fields-> 
		 FIELD
		  Name: val
		  Type: class ClassA
		  Modifiers: private
		  Value: ClassA
		 FIELD
		  Name: val2
		  Type: class ClassA
		  Modifiers: private static
		  Value: null
		 FIELD
		  Name: val3
		  Type: int
		  Modifiers: private
		  Value: 34
		 FIELD
		  Name: vallarray
		  Type: class [LClassA;
		  Modifiers: private
		  Component Type: class ClassA
	INTERFACES ( ClassC )
	Interfaces-> 
	 INTERFACE -> Recursively Inspect
	 InterfaceA
		CLASS
		Class: InterfaceA
		INTERFACES ( InterfaceA )
		Interfaces-> 
		 INTERFACE -> Recursively Inspect
		 InterfaceB
			CLASS
			Class: InterfaceB
			INTERFACES ( InterfaceB )
			Interfaces-> NONE
			CONSTRUCTORS ( InterfaceB )
			Constructors-> NONE
			METHODS ( InterfaceB )
			Methods-> 
			 METHOD
			  Name: func0
			  Exceptions-> 
			   java.lang.Exception
			  Parameter types-> 
			   int
			   boolean
			  Return type: void
			  Modifiers: public abstract
			FIELDS ( InterfaceB )
			Fields-> NONE
		CONSTRUCTORS ( InterfaceA )
		Constructors-> NONE
		METHODS ( InterfaceA )
		Methods-> 
		 METHOD
		  Name: func1
		  Exceptions-> 
		   java.lang.Exception
		  Parameter types-> 
		   int
		   double
		   boolean
		   class java.lang.String
		  Return type: void
		  Modifiers: public abstract
		 METHOD
		  Name: func2
		  Exceptions-> 
		   java.lang.Exception
		   java.lang.ArithmeticException
		   java.lang.IllegalMonitorStateException
		  Parameter types-> 
		   class java.lang.String
		  Return type: int
		  Modifiers: public abstract
		FIELDS ( InterfaceA )
		Fields-> NONE
	CONSTRUCTORS ( ClassC )
	Constructors-> 
	 CONSTRUCTOR
	  Name: ClassC
	  Parameter types-> NONE
	  Modifiers: public
	 CONSTRUCTOR
	  Name: ClassC
	  Parameter types-> 
	   int
	   int
	  Modifiers: public
	METHODS ( ClassC )
	Methods-> 
	 METHOD
	  Name: func1
	  Exceptions-> 
	   java.lang.Exception
	  Parameter types-> 
	   int
	   double
	   boolean
	   class java.lang.String
	  Return type: void
	  Modifiers: public
	 METHOD
	  Name: func0
	  Exceptions-> 
	   java.lang.Exception
	  Parameter types-> 
	   int
	   boolean
	  Return type: void
	  Modifiers: public
	 METHOD
	  Name: func3
	  Exceptions-> NONE
	  Parameter types-> 
	   int
	  Return type: void
	  Modifiers: public abstract
	 METHOD
	  Name: func2
	  Exceptions-> 
	   java.lang.Exception
	   java.lang.ArithmeticException
	   java.lang.IllegalMonitorStateException
	  Parameter types-> 
	   class java.lang.String
	  Return type: int
	  Modifiers: public
	 METHOD
	  Name: run
	  Exceptions-> NONE
	  Parameter types-> NONE
	  Return type: void
	  Modifiers: public
	 METHOD
	  Name: toString
	  Exceptions-> NONE
	  Parameter types-> NONE
	  Return type: class java.lang.String
	  Modifiers: public
	FIELDS ( ClassC )
	Fields-> 
	 FIELD
	  Name: val2
	  Type: class ClassA
	  Modifiers: private
	  Value: ClassA
	 FIELD
	  Name: val3
	  Type: class ClassA
	  Modifiers: private
	  Value: ClassA
	 FIELD
	  Name: val4
	  Type: class ClassA
	  Modifiers: private
	  Value: ClassA
INTERFACES ( ClassB )
Interfaces-> 
 INTERFACE -> Recursively Inspect
 java.lang.Runnable
	CLASS
	Class: java.lang.Runnable
	INTERFACES ( java.lang.Runnable )
	Interfaces-> NONE
	CONSTRUCTORS ( java.lang.Runnable )
	Constructors-> NONE
	METHODS ( java.lang.Runnable )
	Methods-> 
	 METHOD
	  Name: run
	  Exceptions-> NONE
	  Parameter types-> NONE
	  Return type: void
	  Modifiers: public abstract
	FIELDS ( java.lang.Runnable )
	Fields-> NONE
CONSTRUCTORS ( ClassB )
Constructors-> 
 CONSTRUCTOR
  Name: ClassB
  Parameter types-> NONE
  Modifiers: public
METHODS ( ClassB )
Methods-> 
 METHOD
  Name: func3
  Exceptions-> NONE
  Parameter types-> 
   int
  Return type: void
  Modifiers: public
 METHOD
  Name: run
  Exceptions-> NONE
  Parameter types-> NONE
  Return type: void
  Modifiers: public
 METHOD
  Name: toString
  Exceptions-> NONE
  Parameter types-> NONE
  Return type: class java.lang.String
  Modifiers: public
FIELDS ( ClassB )
Fields-> 
 FIELD
  Name: val
  Type: class ClassA
  Modifiers: private
  Value: ClassA
 FIELD
  Name: val2
  Type: class ClassA
  Modifiers: private
  Value: ClassA
 FIELD
  Name: val3
  Type: class ClassA
  Modifiers: private
  Value: null
======================================================
